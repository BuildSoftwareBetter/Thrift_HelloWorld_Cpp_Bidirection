// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "HelloWorldBidirectionService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/server/TThreadPoolServer.h>

#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>  
#include <thrift/concurrency/StdThreadFactory.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::apache::thrift::concurrency;

using boost::shared_ptr;

static boost::shared_ptr<transport::TTransport> g_CurrentTransport = nullptr;

class HelloWorldBidirectionServiceHandler : virtual public HelloWorldBidirectionServiceIf {
public:
	HelloWorldBidirectionServiceHandler() {
		// Your initialization goes here
	}

	void SayHello(const std::string& msg) {
		// Your implementation goes here
		printf("%s\n", msg);

		SayToClient(msg);
	}
	void SayToClient(const std::string& msg)
	{
		shared_ptr<TBinaryProtocol> protocol(new TBinaryProtocol(g_CurrentTransport));
		HelloWorldBidirectionServiceClient client(protocol);
		//Thread.Sleep(1000);
		client.SayHello(msg);
	}
};

class HelloWorldBidirectionProcessor : public TProcessorFactory
{
public:
	boost::shared_ptr<TProcessor> getProcessor(const TConnectionInfo& connInfo)
	{
		g_CurrentTransport = connInfo.transport;

		printf("接收到连接信号\n");

		shared_ptr<HelloWorldBidirectionServiceHandler> handler(new HelloWorldBidirectionServiceHandler());
		shared_ptr<TProcessor> processor(new HelloWorldBidirectionServiceProcessor(handler));
		return processor;
	}
};
static boost::shared_ptr<TProcessorFactory> getProcessorFactory()
{
	shared_ptr<TProcessorFactory> processorFactory(new HelloWorldBidirectionProcessor());
	return processorFactory;
}



int main_tt(int argc, char **argv) {
	int port = 9090;
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new TTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(10);//指定10个线程数  

	shared_ptr<StdThreadFactory> threadFactory = shared_ptr<StdThreadFactory>(new StdThreadFactory());
	threadManager->threadFactory(threadFactory);
	threadManager->start();

	shared_ptr<TThreadPoolServer> server(new TThreadPoolServer(getProcessorFactory(), serverTransport, transportFactory, protocolFactory, threadManager));

	/* shared_ptr<HelloWorldBidirectionServiceHandler> handler(new HelloWorldBidirectionServiceHandler());
	 shared_ptr<TProcessor> processor(new HelloWorldBidirectionServiceProcessor(handler));
	 shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	 shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	 shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	 TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);*/
	server->serve();
	return 0;
}