/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HelloWorldBidirectionService_H
#define HelloWorldBidirectionService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "HelloWorld_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HelloWorldBidirectionServiceIf {
 public:
  virtual ~HelloWorldBidirectionServiceIf() {}
  virtual void SayHello(const std::string& msg) = 0;
};

class HelloWorldBidirectionServiceIfFactory {
 public:
  typedef HelloWorldBidirectionServiceIf Handler;

  virtual ~HelloWorldBidirectionServiceIfFactory() {}

  virtual HelloWorldBidirectionServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HelloWorldBidirectionServiceIf* /* handler */) = 0;
};

class HelloWorldBidirectionServiceIfSingletonFactory : virtual public HelloWorldBidirectionServiceIfFactory {
 public:
  HelloWorldBidirectionServiceIfSingletonFactory(const boost::shared_ptr<HelloWorldBidirectionServiceIf>& iface) : iface_(iface) {}
  virtual ~HelloWorldBidirectionServiceIfSingletonFactory() {}

  virtual HelloWorldBidirectionServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HelloWorldBidirectionServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HelloWorldBidirectionServiceIf> iface_;
};

class HelloWorldBidirectionServiceNull : virtual public HelloWorldBidirectionServiceIf {
 public:
  virtual ~HelloWorldBidirectionServiceNull() {}
  void SayHello(const std::string& /* msg */) {
    return;
  }
};

typedef struct _HelloWorldBidirectionService_SayHello_args__isset {
  _HelloWorldBidirectionService_SayHello_args__isset() : msg(false) {}
  bool msg :1;
} _HelloWorldBidirectionService_SayHello_args__isset;

class HelloWorldBidirectionService_SayHello_args {
 public:

  HelloWorldBidirectionService_SayHello_args(const HelloWorldBidirectionService_SayHello_args&);
  HelloWorldBidirectionService_SayHello_args& operator=(const HelloWorldBidirectionService_SayHello_args&);
  HelloWorldBidirectionService_SayHello_args() : msg() {
  }

  virtual ~HelloWorldBidirectionService_SayHello_args() throw();
  std::string msg;

  _HelloWorldBidirectionService_SayHello_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const HelloWorldBidirectionService_SayHello_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const HelloWorldBidirectionService_SayHello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloWorldBidirectionService_SayHello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HelloWorldBidirectionService_SayHello_pargs {
 public:


  virtual ~HelloWorldBidirectionService_SayHello_pargs() throw();
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class HelloWorldBidirectionServiceClient : virtual public HelloWorldBidirectionServiceIf {
 public:
  HelloWorldBidirectionServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HelloWorldBidirectionServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SayHello(const std::string& msg);
  void send_SayHello(const std::string& msg);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HelloWorldBidirectionServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HelloWorldBidirectionServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HelloWorldBidirectionServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SayHello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HelloWorldBidirectionServiceProcessor(boost::shared_ptr<HelloWorldBidirectionServiceIf> iface) :
    iface_(iface) {
    processMap_["SayHello"] = &HelloWorldBidirectionServiceProcessor::process_SayHello;
  }

  virtual ~HelloWorldBidirectionServiceProcessor() {}
};

class HelloWorldBidirectionServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HelloWorldBidirectionServiceProcessorFactory(const ::boost::shared_ptr< HelloWorldBidirectionServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HelloWorldBidirectionServiceIfFactory > handlerFactory_;
};

class HelloWorldBidirectionServiceMultiface : virtual public HelloWorldBidirectionServiceIf {
 public:
  HelloWorldBidirectionServiceMultiface(std::vector<boost::shared_ptr<HelloWorldBidirectionServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HelloWorldBidirectionServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HelloWorldBidirectionServiceIf> > ifaces_;
  HelloWorldBidirectionServiceMultiface() {}
  void add(boost::shared_ptr<HelloWorldBidirectionServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void SayHello(const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SayHello(msg);
    }
    ifaces_[i]->SayHello(msg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HelloWorldBidirectionServiceConcurrentClient : virtual public HelloWorldBidirectionServiceIf {
 public:
  HelloWorldBidirectionServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HelloWorldBidirectionServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SayHello(const std::string& msg);
  void send_SayHello(const std::string& msg);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
